let x = window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth;
let y = window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight;

let fileManagerURL = '/admin/media/file-manager'

let imageLinkButton = "Insert/edit image";
let mediaLinkButton = "Insert/edit media";
let regularLinkButton = "Insert/edit link";

let dialog = ".tox-dialog";
let linkReceivedFromFilemanager = '';

let instanceApi = null;
function fileManagerOnAction(editor) {
    /* Open window */
    instanceApi = editor.windowManager.openUrl({
        title: 'Tonics Drive Manager',
        width: x,
        height: y,
        url: fileManagerURL
    });
}
const CommandBroadCaster = {
    imageLink: {
        textContent: "Insert/Edit Image",
        handler: function (el) {
            let imageDialog = el.closest(".tox-dialog");
            let imageSrc = imageDialog.querySelector('input[type="url"]');
            imageSrc.value = linkReceivedFromFilemanager;
        }
    },
    mediaLink: {
        textContent: "Insert/Edit Media",
        handler: function (el) {
            let imageDialog = el.closest(".tox-dialog");
            let imageSrc = imageDialog.querySelector('input[type="url"]');
            imageSrc.value = linkReceivedFromFilemanager;
        }
    },
    regularLink: {
        textContent: "Insert/Edit Link",
        handler: function (el) {
            let imageDialog = el.closest(".tox-dialog");
            let imageSrc = imageDialog.querySelector('input[type="url"]');
            imageSrc.value = linkReceivedFromFilemanager;
        }
    }
};
function mutationObserverOfDialog(){
    const tinyDialogObserver = new MutationObserver(((mutationsList, observer) => {
        for(const mutation of mutationsList) {
            let addedNode = mutation.addedNodes[0];
            if (mutation.addedNodes.length > 0 && addedNode.nodeType === Node.ELEMENT_NODE){
                let tinyDialogTitle = addedNode.querySelectorAll(".tox-dialog__title");
                if (tinyDialogTitle){
                    tinyDialogTitle.forEach(el => {
                        for (const key in CommandBroadCaster) {
                            if (CommandBroadCaster[key].textContent === el.textContent) {
                                CommandBroadCaster[key].handler(el);
                            }
                        }
                    });
                }
            }
        }
    }));
    // Start observing the target node for configured mutations
    tinyDialogObserver.observe(document.querySelector('body'), { attributes: false, childList: true, subtree: true });
}
mutationObserverOfDialog();

tinymce.PluginManager.add('tonics-drivemanager', function(editor, url) {
    /* Add a button that opens a window */
    editor.ui.registry.addButton('tonics-drivemanager', {
        icon: 'browse',
        text: 'File Manager',
        onAction: () => {
            fileManagerOnAction(editor)
        }
    });

    // CONTEXT MENU
    editor.ui.registry.addMenuItem('tonics-drivemanager', {
        icon: 'browse',
        text: 'File Manager',
        onAction: () => {
            fileManagerOnAction(editor)
        }
    });

    editor.ui.registry.addContextMenu('tonics-drivemanager', {
        update: function (element) {
            return 'tonics-drivemanager';
        }
    });

    editor.addCommand('tonics:ImageLink', function (ui, value, n) {
        linkReceivedFromFilemanager = value;
        instanceApi.close();
        let imageLinkButtonEl = editor.editorContainer.querySelector(`[aria-label="${imageLinkButton}"]`);
        imageLinkButtonEl.click();
    });

    editor.addCommand('tonics:MediaLink', function (ui, value) {
        linkReceivedFromFilemanager = value;
        instanceApi.close();
        let MediaLinkButtonEl = editor.editorContainer.querySelector(`[aria-label="${mediaLinkButton}"]`);
        MediaLinkButtonEl.click();
    });

    editor.addCommand('tonics:RegularLink', function (ui, value) {
        linkReceivedFromFilemanager = value;
        instanceApi.close();
        let RegularLinkButtonEl = editor.editorContainer.querySelector(`[aria-label="${regularLinkButton}"]`);
        RegularLinkButtonEl.click();
    });

    /* Return the metadata for the help plugin */
    return {
        getMetadata: function () {
            return  {
                name: 'Tonics Drive Manager',
                url: ''
            };
        }
    };
});