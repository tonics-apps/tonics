let fieldManagerXWidth = window.innerWidth || document.documentElement.clientWidth || document.getElementsByTagName('body')[0].clientWidth;
let fieldManagerYHeight = window.innerHeight || document.documentElement.clientHeight || document.getElementsByTagName('body')[0].clientHeight;
let fieldSelectionManagerURL = '/admin/tools/field/selection-manager'
let fieldSelectionInstanceAPI = null;

var dataReceivedFromFieldManager = '';
let tabsCollatedFieldItemsJSONValue = null, tabsContainer = null, isTabsContainerEdit = false;

function fieldSelectionManagerOnAction(editor) {
    tabsContainer = null;
    /* Open window */
    fieldSelectionInstanceAPI = editor.windowManager.openUrl({
        title: 'Tonics Field Selection Manager',
        width: fieldManagerXWidth,
        height: fieldManagerYHeight,
        url: fieldSelectionManagerURL
    });
}

tinymce.PluginManager.add('tonics-fieldselectionmanager', function(editor, url) {
    editor.on('init', function (e) {
        editor.getBody().addEventListener('click', (e) => {
            function getCSRFFromInput(csrfNames) {
                let csrf = null;
                csrfNames.forEach((value, index) => {
                    var _a, _b;
                    let inputCSRF = (_a = document.querySelector(`input[name=${value}]`)) == null ? void 0 : _a.value;
                    if (!inputCSRF) {
                        inputCSRF = (_b = document.querySelector(`meta[name=${value}]`)) == null ? void 0 : _b.content;
                    }
                    if (!csrf && inputCSRF) {
                        csrf = inputCSRF;
                    }
                });
                return csrf;
            }
            let target = e.target, onClick = e;
            if (target.classList.contains('fieldsEdit')) {
                if (target.closest('.tabs')) {
                    isTabsContainerEdit = true;
                    tabsContainer = target.closest('.tabs');
                    let tonicsFieldWrapper = tabsContainer.querySelector('.tonicsFieldWrapper');
                    let jsonValue = tonicsFieldWrapper.value;
                    /* Open window */
                    fieldSelectionInstanceAPI = tinymce.activeEditor.windowManager.openUrl({
                        title: 'Tonics Field Selection Manager',
                        width: fieldManagerXWidth,
                        height: fieldManagerYHeight,
                        url: fieldSelectionManagerURL
                    });
                    tabsCollatedFieldItemsJSONValue = jsonValue;
                }
            }

            if (target.classList.contains('fieldsDelete')) {
                let tabContainer = target.closest('.tabs');
                if (tabContainer) {
                    window?.TonicsScript?.promptToast("Field deletion might be irreversible", "Delete Field", () => {
                        tabContainer.remove();
                    })
                }
            }
        });
    });

    /* Add a button that opens a window */
    editor.ui.registry.addButton('tonics-fieldselectionmanager', {
        icon: 'non-breaking',
        text: 'Field Manager',
        onAction: () => {
            fieldSelectionManagerOnAction(editor)
        }
    });

    // CONTEXT MENU
    editor.ui.registry.addMenuItem('tonics-fieldselectionmanager', {
        icon: 'non-breaking',
        text: 'Field Manager',
        onAction: () => {
            fieldSelectionManagerOnAction(editor)
        }
    });

    editor.ui.registry.addContextMenu('tonics-fieldselectionmanager', {
        update: function (element) {
            return 'tonics-fieldselectionmanager';
        }
    });

    editor.addCommand('tonics:OpenedFieldSelectionManager', function (ui, value, n) {
        fieldSelectionInstanceAPI.sendMessage({
            type: "tonics:FieldSelectedData",
            message: tabsCollatedFieldItemsJSONValue,
        });
    });

    editor.addCommand('tonics:FieldSelectedData', function (ui, value, n) {
        dataReceivedFromFieldManager = value;
        fieldSelectionInstanceAPI.close();
        if (tabsContainer){
            tabsContainer.outerHTML = dataReceivedFromFieldManager;
        } else {
            tinymce.activeEditor.insertContent(dataReceivedFromFieldManager);
        }
        tabsContainer = null;
    });

    /* Return the metadata for the help plugin */
    return {
        getMetadata: function () {
            return  {
                name: 'Field Selection Manager',
                url: ''
            };
        }
    };
});