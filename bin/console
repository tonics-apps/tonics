#!/usr/bin/php
<?php
/*
 * Copyright (c) 2021. Ahmed Olayemi Faruq <faruq@devsrealm.com>
 *
 * This program is licensed under the PolyForm Noncommercial License 1.0.0. You should have received a copy of the PolyForm Noncommercial License 1.0.0 along with this program, if not, visit: https://polyformproject.org/licenses/noncommercial/1.0.0/
 */

use Ahc\Env\Loader;
use App\Commands\ClearCache;
use App\Commands\Environmental\SetEnvironmentalKey;
use App\Commands\Environmental\SetEnvironmentalPepper;
use App\Commands\Module\MigrateAll;
use App\Commands\Module\MigrateAllFresh;
use App\Commands\Module\ModuleMakeConsole;
use App\Commands\Module\ModuleMakeMigration;
use App\Commands\Module\ModuleMigrate;
use App\Commands\Module\ModuleMigrateDown;
use App\Commands\PreInstall\PreInstallerManager;
use App\Commands\Scheduler\ScheduleManager;
use App\Commands\Sync\SyncDirectory;
use App\Configs\AppConfig;
use Devsrealm\TonicsConsole\CommandRegistrar;
use Devsrealm\TonicsConsole\Console;
use Devsrealm\TonicsConsole\ProcessCommandLineArgs;
use Devsrealm\TonicsContainer\Container;

require dirname(__DIR__) . "/vendor/autoload.php";

$args = new ProcessCommandLineArgs($argv);
$container = new Container();

if ($args->passes()) {

    #
    # LOAD ENV VARIABLES
    #
    define('APP_ROOT', dirname(__DIR__));
    (new Loader)->load(APP_ROOT . '/.env');
    AppConfig::initLoader();
    AppConfig::includeHelpers();
    #
    # REGISTER COMMANDS
    #
    try {
        $commandRegistrar = new CommandRegistrar(
            $container->resolveMany([
                PreInstallerManager::class,
                ScheduleManager::class,
                ModuleMakeConsole::class,
                ModuleMakeMigration::class,
                ModuleMigrate::class,
                MigrateAllFresh::class,
                MigrateAll::class,
                ModuleMigrateDown::class,
                // SetEnvironmentalKey::class, <- No Longer Needed
                SetEnvironmentalPepper::class,
                ClearCache::class,
                SyncDirectory::class,
            ])
        );
    } catch (ReflectionException $e) {
        exit(1);
        // dd($e);
    }

    $console = new Console($commandRegistrar, $args->getProcessArgs(), $container);
    $console->bootConsole();
}
exit(1);